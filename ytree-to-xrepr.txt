
    // -- Litmus-specific elements: ------------------------------------------------------------------------------------

    //@Override
    //public XEntity visit(YPreludeStatement node) {
    //    programBuilder.beginPreludeDefinition();
    //    visit(node.getBody());
    //    programBuilder.endProcessDefinition();
    //    return null;
    //}
    //
    //@Override
    //public XEntity visit(YProcessStatement node) {
    //    programBuilder.beginProcessDefinition(node.getProcessId());
    //    visit(node.getBody());
    //    programBuilder.endProcessDefinition();
    //    return null;
    //}
    //
    //@Override
    //public XAssertion visit(YVariableAssertion node) {
    //    XMemoryUnit memoryUnit = visit(node.getLeftExpression());
    //    XMemoryUnit value = visit(node.getRightExpression());
    //    XRegister localValue = programBuilder.copyToLocalMemoryIfNecessary(value);
    //    return new XAssertion(memoryUnit, localValue);
    //}

    // -- END OF Litmus-specific elements ------------------------------------------------------------------------------

    @Override
    public XMemoryUnit visit(YExpression node) {
        return (XMemoryUnit) super.visit(node);
    }

    @Override
    public XMemoryUnit visit(YMemoryLocation node) {
        return (XMemoryUnit) super.visit(node);
    }

    @Override
    public XMemoryUnit visit(YAssignee node) {
        return (XMemoryUnit) super.visit(node);
    }

    @Override
    public XConstant visit(YConstant node) {
        // TODO: convert type Y -> X
        return new XConstant(node.getValue(), new XMockType()); //node.getType());
    }

    @Override
    public XEntity visit(YIndexerExpression node) {
        throw new NotImplementedException();
    }

    @Override
    public XEntity visit(YMemberAccessExpression node) {
        throw new NotImplementedException();
    }

    @Override
    public XEntity visit(YInvocationExpression node) {
        throw new NotImplementedException();
    }

    @Override
    public XEntity visit(YFunctionDefinition node) {
        // todo: process header as well
        return super.visit(node.getBody());
    }

    @Override
    public XEntity visit(YRelativeBinaryExpression node) {
        XMemoryUnit left = visit(node.getLeftExpression());
        XMemoryUnit right = visit(node.getRightExpression());
        XOperator operator = XOperatorConverter.convert(node.getKind());
        return programBuilder.emitComputationEvent(operator, left, right);
    }

    @Override
    public XBinaryOperationEvent visit(YLogicalBinaryExpression node) {
        XMemoryUnit left = visit(node.getLeftExpression());
        XMemoryUnit right = visit(node.getRightExpression());
        XOperator operator = XOperatorConverter.convert(node.getKind());
        return programBuilder.emitComputationEvent(operator, left, right);
    }

    @Override
    public XEntity visit(YIntegerBinaryExpression node) {
        XMemoryUnit left = visit(node.getLeftExpression());
        XMemoryUnit right = visit(node.getRightExpression());
        XOperator operator = XOperatorConverter.convert(node.getKind());
        return programBuilder.emitComputationEvent(operator, left, right);
    }

    @Override
    public XEntity visit(YLogicalUnaryExpression node) {
        //XMemoryUnit expression = visit(node.getExpression());
        //XOperator operator = XOperatorConverter.convert(node.getKind());
        //return programBuilder.emitComputationEvent(operator, expression);
        throw new NotImplementedException();
    }

    @Override
    public XEntity visit(YPointerUnaryExpression node) {
        throw new NotImplementedException();
    }

    @Override
    public XEntity visit(YIntegerUnaryExpression node) {
        throw new NotImplementedException();
    }

    @Override
    public XEntity visit(YTernaryExpression node) {
        XMemoryUnit conditionShared = visit(node.getCondition());
        XRegister condition = programBuilder.copyToLocalMemoryIfNecessary(conditionShared);

        XMemoryUnit trueBranchShared = visit(node.getTrueExpression());
        XRegister trueBranch = programBuilder.copyToLocalMemoryIfNecessary(trueBranchShared);

        //XMemoryUnit falseBranchShared = node.getFalseExpression() != null
        //        ? visit(node.getTrueExpression())
        //        : null; //todo: not null
        //XRegister falseBranch = falseBranchShared != null
        //        ? programBuilder.copyToLocalMemoryIfNecessary(falseBranchShared)
        //        : null;


    }

    @Override
    public XEntity visit(YAssignmentExpression node) {
        XMemoryUnit assignee = visit(node.getAssignee());
        XMemoryUnit expression = visit(node.getExpression());
        return programBuilder.emitMemoryEvent(assignee, expression);
    }

    @Override
    public XMemoryUnit visit(YLinearStatement node) {
        return visit(node.getExpression());
    }

    @Override
    public XRegister visit(YVariableDeclarationStatement node) {
        // TODO: does C declare local memory units?? Local/Global should be determined on C-level (after YTree construction)
        // todo: declare //programBuilder.declareMemoryUnit(node.getVariable())
        // todo: convert Y-type to X-type
        return programBuilder.memoryManager.declareLocalMemoryUnit(node.getVariable().getName(), new XMockType());
    }

    @Override
    public XEntity visit(YType node) {
        throw new NotImplementedException();
    }

    @Override
    public XMemoryUnit visit(YVariableRef node) {
        return node.isGlobal()
                ? memoryManager.getSharedMemoryUnit(node.getName())
                : memoryManager.getLocalMemoryUnit (node.getName());
    }

    @Override
    public XEntity visit(YStatement node) {
        throw new NotImplementedException();
    }

    @Override
    public XEntity visit(YCompoundStatement node) {
        throw new NotImplementedException();
    }

    @Override
    public XEntity visit(YBranchingStatement node) {
        throw new NotImplementedException();
    }

    @Override
    public XEntity visit(YLoopStatement node) {
        throw new NotImplementedException();
    }

    @Override
    public XEntity visit(YJumpStatement node) {
        throw new NotImplementedException();
    }