apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'antlr'
apply plugin: 'eclipse'
apply plugin: 'idea'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    flatDir {
        dirs 'lib'
    }
    jcenter()
    //mavenCentral()
}

dependencies {
    // JUnit:
    testCompile 'junit:junit:4.12'
    testCompile group: 'com.googlecode.zohhak', name: 'zohhak', version: '1.1.1'

    antlr "org.antlr:antlr4:4.7"
    compile "com.beust:jcommander:1.71"
    compile group: 'com.google.code.gson', name: 'gson', version: '1.7.2'
    compile "commons-io:commons-io:2.5"
    compile "com.google.guava:guava:23.6-jre"

    compile group: 'guru.nidi', name: 'graphviz-java', version: '0.2.3'

    // for Aramis only:
    compile "commons-cli:commons-cli:1.4"
    compile "commons-io:commons-io:2.5"

    // local dependencies:
    compile name: "com.microsoft.z3"

}

ext.antlr = [
    generatedSourceDir: "src/generated/java/",
    grammarsDir: "src/main/antlr/",
    resultPackage: "mousquetaires.languages.parsers",
]

idea {
    module {
        name = "mousquetaires"
        contentRoot         =  file(".")
        outputDir           =  file("build")
        sourceDirs          = [file("src/main/java")] // + src/main/resources ?
        sourceDirs          += file("src/generated/java")  // after 'generatedSourceDirs' will become not incubaging, set it here
        testSourceDirs      = [file("src/test/java")]
        excludeDirs         += file(".idea")
        excludeDirs         += file(".gradle")
        testOutputDir       = file("${outputDir}/test")
    }
}

generateGrammarSource {
    arguments = (["-visitor", "-listener", "-package", antlr.resultPackage] + arguments)
    outputDirectory = file("${project.projectDir}/${antlr.generatedSourceDir}/${antlr.resultPackage.replaceAll("\\.", "/")}")
}

compileJava {
    dependsOn generateGrammarSource
    source "${project.projectDir}/${antlr.generatedSourceDir}"
    project.buildDir = 'out'
}

clean {
    delete += fileTree(antlr.generatedSourceDir).include('**/*')
}

task getHomeDir {
    println gradle.gradleHomeDir
}

task listJars() {
    project.configurations.compile.each { println it.path }
}

// For now, gradle allows running application in dummy

mainClassName = "mousquetaires.app.App"

task runDartagnan(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'dartagnan.Dartagnan'
    if(project.hasProperty('args')){
        args project.args.split('\\s+')
    }
}

task runPorthos(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'porthos.Porthos'
    if(project.hasProperty('args')){
        args project.args.split('\\s+')
    }
}


