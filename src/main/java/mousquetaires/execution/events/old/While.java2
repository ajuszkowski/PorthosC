package mousquetaires.execution.events.old;

import java.util.Collections;

import mousquetaires.languages.internal.expressions.BooleanExpression;
import mousquetaires.execution.Processus;


public class While extends Processus {

    private BooleanExpression pred;
    private Processus t;

    public While(BooleanExpression pred, Processus t) {
        this.pred = pred;
        this.t = t;
        t.incCondLevel();
    }

    public String toString() {
        return String.format("%swhile %s {\n%s\n%s}", String.join("", Collections.nCopies(condLevel, "  ")), pred, t, String.join("", Collections.nCopies(condLevel, "  ")));
    }

    public void incCondLevel() {
        condLevel++;
        t.incCondLevel();
    }

    public void decCondLevel() {
        condLevel--;
        t.decCondLevel();
    }

    public Processus unroll(int steps) {
        if(steps == 0)
            return new Skip();
        else {
            Processus copyT = t.clone();
            copyT.decCondLevel();
            copyT = copyT.unroll(steps);
            int oldCondLevel = condLevel;
            Processus newProcess = new If(pred, new Seq(copyT, this.unroll(steps - 1)), new Skip());
            newProcess.condLevel = oldCondLevel;
            return newProcess;
        }
    }

    public While clone() {
        BooleanExpression newPred = pred.clone();
        Processus newT = t.clone();
        newT.decCondLevel();
        While newWhile = new While(newPred, newT);
        newWhile.condLevel = condLevel;
        return newWhile;
    }
}