package mousquetaires.memorymodels.old;

import java.util.Set;
import java.util.stream.Collectors;

import com.microsoft.z3.*;

import mousquetaires.execution.events.old.Event;
import mousquetaires.execution.events.old.Local;
import mousquetaires.execution.events.old.MemEvent;
import mousquetaires.execution.Programme;


public class RMO {

    public static BoolExpr encode(Programme programme, Context ctx) {
        Set<Event> events = programme.getEvents().stream().filter(e -> e instanceof MemEvent).collect(Collectors.toSet());
        Set<Event> eventsL = programme.getEvents().stream().filter(e -> e instanceof MemEvent || e instanceof Local).collect(Collectors.toSet());

        BoolExpr enc = Encodings.satUnion("co", "fr", events, ctx);
        enc = ctx.mkAnd(enc, Encodings.satUnion("com", "(co+fr)", "rf", events, ctx));
        enc = ctx.mkAnd(enc, Encodings.satMinus("poloc", "RR", events, ctx));
        enc = ctx.mkAnd(enc, Encodings.satUnion("(poloc\\RR)", "com", events, ctx));
        enc = ctx.mkAnd(enc, Encodings.satUnion("com-rmo", "(co+fr)", "rfe", events, ctx));
        enc = ctx.mkAnd(enc, Encodings.satTransFixPoint("idd", eventsL, ctx));
        enc = ctx.mkAnd(enc, Encodings.satIntersection("data", "idd^+", "RW", eventsL, ctx));
        enc = ctx.mkAnd(enc, Encodings.satIntersection("poloc", "WR", events, ctx));
        enc = ctx.mkAnd(enc, Encodings.satUnion("data", "(poloc&WR)", events, ctx));
        enc = ctx.mkAnd(enc, Encodings.satTransFixPoint("(data+(poloc&WR))", events, ctx));
        enc = ctx.mkAnd(enc, Encodings.satIntersection("(data+(poloc&WR))^+", "RM", events, ctx));
        enc = ctx.mkAnd(enc, Encodings.satIntersection("ctrl", "RW", events, ctx));
        enc = ctx.mkAnd(enc, Encodings.satUnion("(ctrl&RW)", "ctrlisync", events, ctx));
        enc = ctx.mkAnd(enc, Encodings.satUnion("dp-rmo", "((ctrl&RW)+ctrlisync)", "((data+(poloc&WR))^+&RM)", events, ctx));
        enc = ctx.mkAnd(enc, Encodings.satUnion("fence-rmo", "sync", "mfence", events, ctx));
        enc = ctx.mkAnd(enc, Encodings.satUnion("po-rmo", "dp-rmo", "fence-rmo", events, ctx));
        enc = ctx.mkAnd(enc, Encodings.satUnion("ghb-rmo", "po-rmo", "com-rmo", events, ctx));
        return enc;
    }

    public static BoolExpr Consistent(Programme programme, Context ctx) {
        Set<Event> events = programme.getEvents().stream().filter(e -> e instanceof MemEvent).collect(Collectors.toSet());
        return ctx.mkAnd(Encodings.satAcyclic("((poloc\\RR)+com)", events, ctx), Encodings.satAcyclic("ghb-rmo", events, ctx));
    }

    public static BoolExpr Inconsistent(Programme programme, Context ctx) {
        Set<Event> events = programme.getEvents().stream().filter(e -> e instanceof MemEvent).collect(Collectors.toSet());
        BoolExpr enc = ctx.mkAnd(Encodings.satCycleDef("((poloc\\RR)+com)", events, ctx), Encodings.satCycleDef("ghb-rmo", events, ctx));
        enc = ctx.mkAnd(enc, ctx.mkOr(Encodings.satCycle("((poloc\\RR)+com)", events, ctx), Encodings.satCycle("ghb-rmo", events, ctx)));
        return enc;
    }
}