package mousquetaires.utils;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;

import mousquetaires.execution.events.old.XEvent;

public class LastModMap {

    private ConcurrentHashMap<Object, Set<XEvent>> map;

    public LastModMap() {
        this.map = new ConcurrentHashMap<Object, Set<XEvent>>();
    }

    public int size() {
        return this.map.size();
    }

    public void put(Object o, Set<XEvent> set) {
        this.map.put(o, set);
    }

    public Set<XEvent> get(Object o) {
        if(keySet().contains(o)) {
            return map.get(o);
        }
        else {
            System.out.println(String.format("Check get() for %s and %s", this, o));
            return new HashSet<XEvent>();
        }
    }

    public LastModMap clone() {
        LastModMap retMap = new LastModMap();
        for(Object o : map.keySet()) {
            retMap.put(o, map.get(o));
        }
        return retMap;
    }

    public Set<Object> keySet() {
        return map.keySet();
    }

    public String toString() {
        return (String) "[" + map.reduce(1, (k, v) -> k + " = " + v, (r1, r2) -> r1 + ", " + r2) + "]";
    }
}